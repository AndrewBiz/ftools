#!/usr/bin/env ruby
# encoding: UTF-8
# (c) ANB Andrew Bizyaev

require 'date'
require_relative 'runner.rb'
require_relative '../mini_exiftool-2.3.0anb'
require_relative '../exif_tagger/exif_tagger'

module FTools
  # setting EXIF DateTimeOriginal nad CreateDate tags
  class Ftfixdate < Runner
    private

    def validate_options
      # @options_cli['--creators']
      # fail FTools::Error, @creators.error_message unless @creators.valid?
    end

    def process_before
      # TODO add info about options used and delta to be added to DTO
      @writer = ExifTagger::Writer.new(
        script_name: 'exif_tagger_dto.txt',
        memo: "#{DateTime.now}: Script generated by #{@tool_name} (ftools bundle) version #{VERSION} (core #{VERSION_CORE})",
        output: STDERR)
    end

    def process_file(ftfile)
      # TODO: fail if file is not supported by exiftool
      ftfile_out = ftfile.clone
      STDERR.puts ftfile_out
      begin
        tags_original = MiniExiftool.new(ftfile.filename,
                                         replace_invalid_chars: true,
                                         composite: true,
                                         timestamps: DateTime)
      rescue
        raise FTools::Error, "EXIF tags reading by mini_exiftool - #{e.message}"
      end
      tags_to_write = ExifTagger::TagCollection.new()
      # tags_to_write[:image_unique_id] = @tags_default[:image_unique_id] + format('%04d', @writer.added_files_count + 1)
      tags_to_write.validate_with_original(tags_original)
      # STDERR.puts tags_to_write.warning_message if tags_to_write.with_warnings?
      fail FTools::Error, tags_to_write.error_message unless tags_to_write.valid?
      @writer.add_to_script(ftfile: ftfile_out, tags: tags_to_write)
      ''
    rescue  => e
      raise FTools::Error, e.message
    end

    def process_after
      @writer.run!
    end
  end
end

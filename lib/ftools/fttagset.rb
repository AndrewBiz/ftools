#!/usr/bin/env ruby
# encoding: UTF-8
# (c) ANB Andrew Bizyaev

require 'date'
require_relative 'runner.rb'
require_relative 'event'
require_relative '../mini_exiftool-2.3.0anb'
require_relative '../exif_tagger/exif_tagger'

module FTools
  # setting EXIF etc tags in media file
  class Fttagset < Runner
    private

    def validate_options
      @event = Event.new(@options_cli['--event'])

      @creators = ExifTagger::CreatorsDir.new(@options_cli['--creators'])
      fail FTools::Error, @creators.error_message unless @creators.valid?
      @places = ExifTagger::PlacesDir.new(@options_cli['--places'])
      fail FTools::Error, @places.error_message unless @places.valid?

      @place_created = @places[@event.alias_place_created]
      fail FTools::Error, "Place '#{@event.alias_place_created}' is not found in #{@places.filename}" if @place_created.empty?

      @tags_default = ExifTagger::TagCollection.new(
        keywords: @event.keywords,
        world_region: @place_created[:world_region],
        country: @place_created[:country],
        country_code: @place_created[:country_code],
        state: @place_created[:state],
        city: @place_created[:city],
        location: @place_created[:location],
        gps_created: @place_created[:gps_created],
        collections: { collection_name: @event.title,
                       collection_uri: @event.uri },
        image_unique_id: "#{DateTime.now.strftime('%Y%m%d-%H%M%S-')}",
        coded_character_set: 'UTF8',
        modify_date: 'now')
      fail FTools::Error, @tags_default.error_message unless @tags_default.valid?
    end

    def process_before
      @writer = ExifTagger::Writer.new(
        script_name: 'exif_tagger.txt',
        memo: "#{DateTime.now}: Script generated by #{@tool_name} (ftools bundle) version #{VERSION} (core #{VERSION_CORE})")
    end

    def process_file(ftfile)
      # TODO: fail if file is not supported by exiftool

      fail FTools::Error, 'non-standard name, use ftrename to rename' unless ftfile.basename_is_standard?
      ftfile_out = ftfile.clone

      begin
        tags_original = MiniExiftool.new(ftfile.filename,
                                         replace_invalid_chars: true,
                                         composite: true,
                                         timestamps: DateTime)
        # tags_original.values.each { |k, v| puts "#{k}=#{v}" }
      rescue
        raise FTools::Error, "EXIF tags reading - #{e.message}"
      end

      # artist=Andrey Bizyaev (photographer); Andrey Bizyaev (camera owner)
      # creator=["Andrey Bizyaev (photographer)", "Andrey Bizyaev (camera owner)"]
      # byline=["Andrey Bizyaev (photographer)", "Andrey Bizyaev (camera owner)"]

      # copyright=2013 (c) Andrey Bizyaev. All Rights Reserved.
      # rights=2013 (c) Andrey Bizyaev. All Rights Reserved.
      # copyrightnotice=2013 (c) Andrey Bizyaev. All Rights Reserved.

      # subject=["before-what-travel", "before-who-Andrew", "before-where-Baltic", "before-when-day", "before-why-vacation", "before-how-fine", "before-method-digicam"]
      # keywords=["before-what-travel", "before-who-Andrew", "before-where-Baltic", "before-when-day", "before-why-vacation", "before-how-fine", "before-method-digicam"]

      # gpsposition=60 deg 0' 0.00" N, 25 deg 0' 0.00" E
      # gpslatitude=60 deg 0' 0.00" N
      # gpslatituderef=North
      # gpslongitude=25 deg 0' 0.00" E
      # gpslongituderef=East
      # gpsaltitude=0.5 m Above Sea Level
      # gpsaltituderef=Above Sea Level

      # locationshownworldregion=Europe

      # locationshowncountryname=Russia
      # countryprimarylocationname=Russia
      # country=Russia

      # locationshowncountrycode=RU

      # locationshownprovincestate=Санкт-Петербург
      # state=Санкт-Петербург
      # provincestate=Санкт-Петербург

      # locationshowncity=Санкт-Петербург
      # city=Санкт-Петербург

      # location=Дворцовая пл.
      # locationshownsublocation=Дворцовая пл.
      # sublocation=Дворцовая пл.

      # collectionname=S-Peterburg Travel
      # collectionuri=anblab.net

      # imageuniqueid=20140402-205030-0001
      # codedcharacterset=UTF8

      # initializing tags for the given file
      tags_to_write = ExifTagger::TagCollection.new

      # TODO: check to not owerwrite existing tags e.g. gps
      author = ftfile_out.author
      fail "Author '#{author}' is not found in #{@creators.filename}" if @creators[author].empty?
      tags_to_write[:creator] = @creators[author][:creator]
      tags_to_write[:copyright] = "#{ftfile_out.date_time.year} #{@creators[author][:copyright]}"

      tags_to_write[:keywords] = @event.keywords
      tags_to_write[:world_region] = @place_created[:world_region]
      tags_to_write[:country] = @place_created[:country]
      tags_to_write[:country_code] = @place_created[:country_code]
      tags_to_write[:state] = @place_created[:state]
      tags_to_write[:city] = @place_created[:city]
      tags_to_write[:location] = @place_created[:location]
      tags_to_write[:gps_created] = @place_created[:gps_created]
      tags_to_write[:collections] = { collection_name: @event.title,
                                      collection_uri: @event.uri }
      tags_to_write[:image_unique_id] = @tags_default[:image_unique_id] +
        format('%04d', @writer.added_files_count + 1)

      tags_to_write[:coded_character_set] = 'UTF8'
      tags_to_write[:modify_date] = 'now'

      fail FTools::Error, tags_to_write.error_message unless tags_to_write.valid?
      @writer.add_to_script(ftfile: ftfile_out, tags: tags_to_write)

      ftfile_out
    rescue  => e
      raise FTools::Error, e.message
    end

    def process_after
      @writer.run!
    end
  end
end

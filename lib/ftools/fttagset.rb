#!/usr/bin/env ruby -w -U
# encoding: UTF-8
# (c) ANB Andrew Bizyaev

require_relative 'runner.rb'
require_relative 'event'
require_relative '../mini_exiftool-2.3.0anb'

module FTools
  # setting EXIF etc tags in media file
  class Fttagset < Runner
    private

    def validate_options
      @event = Event.new(@options_cli['--event'])
    end

    def process_before
      # TMP!
      puts '*** Preparing exiftool script tags.txt...'
      @batch_tags = File.open('tags.txt', 'w+:utf-8')
      @batch_tags.puts "# #{DateTime.now} Script generated by #{@tool_name} version #{VERSION} (core #{VERSION_CORE})"
    end

    def process_file(ftfile)
      # TODO: fail if file is not supported by exiftool

      fail FTools::Error, 'non-standard name, use ftrename to rename' unless
        ftfile.basename_is_standard?
      ftfile_out = ftfile.clone

      begin
        tag = MiniExiftool.new(ftfile.filename, replace_invalid_chars: true,
                                                composite: true,
                                                timestamps: DateTime)
      rescue
        raise FTools::Error, "EXIF tags reading - #{e.message} - #{e.cause}"
      end

      # TMP!
      # MWG:Keywords = IPTC:Keywords, XMP-dc:Subject
      @event.keywords.each do |o|
        @batch_tags.puts %Q{-MWG:Keywords-=#{o}}
        @batch_tags.puts %Q{-MWG:Keywords+=#{o}}
      end
      # collection_name and XPSubject
      @batch_tags.puts %Q{-XMP:CollectionName-=#{@event.title}}
      @batch_tags.puts %Q{-XMP:CollectionName+=#{@event.title}}
      # collection_uri
      @batch_tags.puts %Q{-XMP:CollectionURI-=#{@event.uri}}
      @batch_tags.puts %Q{-XMP:CollectionURI+=#{@event.uri}}
      @batch_tags.puts %Q{-IPTC:CodedCharacterSet=UTF8}
      @batch_tags.puts %Q{-EXIF:ModifyDate=now}
      @batch_tags.puts %Q{#{ftfile}}
      # General options
      @batch_tags.puts %Q{-v0}
      @batch_tags.puts %Q{-P}
      @batch_tags.puts %Q{-overwrite_original}
      @batch_tags.puts %Q{-ignoreMinorErrors}
      @batch_tags.puts %Q{-execute}
      @batch_tags.puts

      ftfile_out
    rescue  => e
      raise FTools::Error, e.message
    end

    def process_after
      # TMP!
      @batch_tags.close
      puts '*** Finished preparation of the script'
      cmd = 'exiftool -@ tags.txt'
      puts "*** Running #{cmd} ..."
      err = File.open('err.log', 'w+:utf-8')
      ok = system(cmd, err: err)
      err.close
      fail 'executing exiftool' if ok.nil?
      STDERR.puts File.read('err.log') unless ok
    end
  end
end
